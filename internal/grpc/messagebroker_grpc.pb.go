// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: grpc/messagebroker.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MessageBroker_Publish_FullMethodName   = "/grpc.MessageBroker/Publish"
	MessageBroker_Subscribe_FullMethodName = "/grpc.MessageBroker/Subscribe"
)

// MessageBrokerClient is the client API for MessageBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageBrokerClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*Empty, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*Response, error)
}

type messageBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageBrokerClient(cc grpc.ClientConnInterface) MessageBrokerClient {
	return &messageBrokerClient{cc}
}

func (c *messageBrokerClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MessageBroker_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageBrokerClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, MessageBroker_Subscribe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageBrokerServer is the server API for MessageBroker service.
// All implementations must embed UnimplementedMessageBrokerServer
// for forward compatibility
type MessageBrokerServer interface {
	Publish(context.Context, *PublishRequest) (*Empty, error)
	Subscribe(context.Context, *SubscribeRequest) (*Response, error)
	mustEmbedUnimplementedMessageBrokerServer()
}

// UnimplementedMessageBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedMessageBrokerServer struct {
}

func (UnimplementedMessageBrokerServer) Publish(context.Context, *PublishRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMessageBrokerServer) Subscribe(context.Context, *SubscribeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMessageBrokerServer) mustEmbedUnimplementedMessageBrokerServer() {}

// UnsafeMessageBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageBrokerServer will
// result in compilation errors.
type UnsafeMessageBrokerServer interface {
	mustEmbedUnimplementedMessageBrokerServer()
}

func RegisterMessageBrokerServer(s grpc.ServiceRegistrar, srv MessageBrokerServer) {
	s.RegisterService(&MessageBroker_ServiceDesc, srv)
}

func _MessageBroker_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBrokerServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageBroker_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBrokerServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageBroker_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageBrokerServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageBroker_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageBrokerServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageBroker_ServiceDesc is the grpc.ServiceDesc for MessageBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MessageBroker",
	HandlerType: (*MessageBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _MessageBroker_Publish_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _MessageBroker_Subscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/messagebroker.proto",
}
